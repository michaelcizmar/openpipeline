/* The following code was generated by JFlex 1.4.3 on 9/27/12 3:47 PM */

/*******************************************************************************
 * Copyright 2009 Dieselpoint, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
 
 /*
 * File: HtmlLexer.flex
 *
 * Processes an HTML file. Recognizes tags, returns text.
 *
 * Recognized constructs:
 *
 *  <!-- ... -->                returned as COMMENT
 *  <tag ... >                  returned as STARTTAG
 *  </tag ...>                  returned as ENDTAG
 *  <title ...></title ...>     returned as STARTTITLE, ENDTITLE
 *  <head ...>                  returned as STARTHEAD, ENDHEAD
 *  <a ...>                     returned as STARTANCHOR, ENDANCHOR
 *  <noindex on><noindex off>   returned as STARTNOINDEX, ENDNOINDEX
 *  <noindex></noindex>         returned as STARTNOINDEX, ENDNOINDEX
 *  <meta ...>                  (same pattern)
 *  <script ...>
 *  <style ... >
 *  <!doctype ...>
 *  <img ...>
 *  <base href="...">           returned as BASE
 *  &#123;                      returned as DECIMAL_SYMBOL
 *  &#xabc;                     returned as HEX_SYMBOL
 *  &nbsp;                      returned as SYMBOL
 *
 *  Everything else             returned as TEXT
 */

package org.openpipeline.html;

import java.io.*;
import org.openpipeline.util.FastStringBuffer;

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/27/12 3:47 PM from the specification file
 * <tt>C:/dev/openpipeline/trunk/openpipeline-core/src/main/java/org/openpipeline/html/HTMLLexer.flex</tt>
 */
public final class HTMLLexer {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\1\4\1\4\1\4\22\0\1\4\1\6\1\0"+
    "\1\40\2\0\1\1\6\0\1\2\1\0\1\14\12\37\1\0\1\34"+
    "\1\5\1\0\1\7\1\2\1\0\1\16\1\27\1\31\1\17\1\13"+
    "\1\23\1\25\1\15\1\11\2\2\1\12\1\24\1\20\1\21\1\32"+
    "\1\35\1\26\1\30\1\10\1\36\2\2\1\22\1\33\1\2\4\0"+
    "\1\2\1\0\1\42\1\27\1\31\1\17\1\13\1\23\1\25\1\15"+
    "\1\11\2\2\1\41\1\24\1\20\1\45\1\32\1\43\1\46\1\30"+
    "\1\10\1\44\2\2\1\22\1\33\1\2\12\0\1\4\44\0\1\2"+
    "\12\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2"+
    "\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0\1\2"+
    "\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2"+
    "\1\0\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0\46\2"+
    "\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2"+
    "\110\0\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0\12\3"+
    "\4\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2"+
    "\12\3\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\3\2"+
    "\60\0\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2"+
    "\7\0\12\2\4\0\12\3\25\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2"+
    "\1\0\3\2\4\0\12\3\2\2\23\0\6\2\4\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0"+
    "\4\2\1\0\1\2\7\0\12\3\2\0\3\2\20\0\11\2\1\0"+
    "\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0"+
    "\1\2\22\0\1\2\17\0\2\2\4\0\12\3\25\0\10\2\2\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0"+
    "\1\2\36\0\2\2\1\0\3\2\4\0\12\3\1\0\1\2\21\0"+
    "\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0"+
    "\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0"+
    "\3\2\55\0\11\3\25\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\12\2\1\0\5\2\46\0\2\2\4\0\12\3\25\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0"+
    "\1\2\1\0\2\2\4\0\12\3\25\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\20\2\46\0\2\2\4\0\12\3\25\0\22\2\3\0"+
    "\30\2\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0"+
    "\2\2\14\0\7\2\11\0\12\3\47\0\2\2\1\0\1\2\2\0"+
    "\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0"+
    "\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3\2\0"+
    "\2\2\42\0\1\2\37\0\12\3\26\0\10\2\1\0\42\2\35\0"+
    "\4\2\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\3\6\0"+
    "\6\2\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0"+
    "\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0"+
    "\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0"+
    "\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0"+
    "\23\2\16\0\11\3\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0"+
    "\32\2\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0"+
    "\22\2\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0"+
    "\1\2\3\0\12\3\46\0\12\3\6\0\130\2\10\0\51\2\127\0"+
    "\35\2\51\0\12\3\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2"+
    "\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2"+
    "\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2"+
    "\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2"+
    "\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2"+
    "\53\0\1\4\1\4\107\0\1\2\15\0\1\2\202\0\1\2\4\0"+
    "\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0"+
    "\3\2\5\0\5\2\u0ebb\0\2\2\52\0\5\2\5\0\2\2\4\0"+
    "\126\2\6\0\3\2\1\0\132\2\1\0\4\2\5\0\50\2\4\0"+
    "\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0"+
    "\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\0\12\2\1\0\15\2\1\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0"+
    "\100\2\2\0\66\2\50\0\14\2\164\0\5\2\1\0\207\2\23\0"+
    "\12\3\7\0\32\2\6\0\32\2\13\0\131\2\3\0\6\2\2\0"+
    "\6\2\2\0\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\2\24\0\1\4\3\0"+
    "\1\5\1\0\1\6\3\0\1\7\1\0\1\10\20\0"+
    "\1\4\1\11\2\0\1\5\1\0\1\6\1\12\5\0"+
    "\1\13\3\0\1\14\2\0\1\15\6\0\1\11\1\16"+
    "\1\17\1\20\1\12\17\0\1\16\1\17\1\20\1\21"+
    "\1\22\2\0\1\23\4\0\1\24\6\0\1\21\1\22"+
    "\2\0\1\25\2\0\1\26\3\0\1\27\1\30\1\0"+
    "\1\7\3\0\1\31\2\0\1\32\4\0\1\7\3\0"+
    "\1\33\5\0\1\34\1\35\24\0\1\36\4\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\303\0\u057c\0\303\0\u05a3"+
    "\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db"+
    "\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\303"+
    "\0\u0813\0\u083a\0\u0861\0\303\0\u0888\0\303\0\u08af\0\u08d6"+
    "\0\u08fd\0\u0924\0\u094b\0\u0972\0\303\0\u0999\0\u09c0\0\u09e7"+
    "\0\303\0\u0a0e\0\u0a35\0\303\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\303\0\u0b46\0\u0b6d\0\u0b94\0\303\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\303\0\303"+
    "\0\303\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\303\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\303\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8"+
    "\0\u0fff\0\303\0\303\0\u1026\0\u104d\0\303\0\u1074\0\u109b"+
    "\0\303\0\u10c2\0\u10e9\0\u1110\0\303\0\303\0\u1137\0\u115e"+
    "\0\u1185\0\u11ac\0\u11d3\0\303\0\u11fa\0\u1221\0\303\0\u1248"+
    "\0\u115e\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\303"+
    "\0\u1359\0\u1380\0\u13a7\0\u12bd\0\u13ce\0\303\0\303\0\u13f5"+
    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d"+
    "\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665"+
    "\0\u168c\0\u16b3\0\u16da\0\303\0\u1701\0\u1728\0\u174f\0\u1776"+
    "\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\2\1\6\40\2"+
    "\1\0\2\2\2\0\1\2\1\0\37\2\12\0\1\7"+
    "\3\0\1\10\1\0\1\11\4\0\1\12\7\0\1\13"+
    "\2\0\1\14\1\15\1\10\1\13\2\0\1\16\4\0"+
    "\1\4\44\0\2\17\2\0\1\20\1\0\1\21\1\22"+
    "\2\17\1\23\1\24\1\25\1\17\1\26\2\17\1\27"+
    "\1\30\2\17\1\31\1\32\3\17\1\0\3\17\1\0"+
    "\1\17\1\25\4\17\57\0\1\33\62\0\1\34\5\0"+
    "\1\35\43\0\1\36\27\0\1\37\74\0\1\40\5\0"+
    "\1\40\5\0\1\41\16\0\1\42\14\0\1\41\17\0"+
    "\1\33\31\0\1\43\46\0\1\44\4\0\7\17\1\45"+
    "\37\17\7\46\1\47\7\46\1\50\27\46\7\17\1\45"+
    "\1\17\1\51\44\17\1\45\14\17\1\52\22\17\2\0"+
    "\2\53\4\0\1\54\3\53\1\0\1\55\1\56\1\53"+
    "\1\57\13\53\1\0\3\53\1\0\1\53\1\56\4\53"+
    "\7\17\1\45\3\17\1\60\37\17\1\61\2\17\1\45"+
    "\46\17\1\45\11\17\1\62\23\17\1\62\10\17\1\45"+
    "\16\17\1\63\17\17\1\63\7\17\1\45\3\17\1\64"+
    "\42\17\1\45\6\17\1\65\23\17\1\65\13\17\1\45"+
    "\1\66\20\17\1\67\15\17\34\0\1\70\44\0\1\71"+
    "\35\0\1\72\23\0\1\72\31\0\1\73\52\0\1\74"+
    "\33\0\1\75\23\0\1\75\4\0\1\41\30\0\1\76"+
    "\2\0\1\41\22\0\1\77\2\0\2\77\3\0\1\77"+
    "\3\0\1\77\1\0\1\77\5\0\1\77\2\0\1\77"+
    "\47\0\1\100\46\0\1\101\3\0\7\46\1\47\46\46"+
    "\1\47\11\46\1\102\23\46\1\102\1\46\7\17\1\45"+
    "\1\103\45\17\1\45\15\17\1\104\21\17\7\53\1\105"+
    "\46\53\1\105\1\53\1\106\44\53\1\105\3\53\1\107"+
    "\37\53\1\110\2\53\1\111\46\53\1\105\11\53\1\112"+
    "\23\53\1\112\1\53\7\17\1\45\6\17\1\113\23\17"+
    "\1\113\4\17\7\61\1\114\37\61\7\17\1\45\1\17"+
    "\1\115\44\17\1\45\6\17\1\116\23\17\1\116\13\17"+
    "\1\45\1\117\45\17\1\45\20\17\1\120\25\17\1\45"+
    "\23\17\1\121\22\17\1\45\16\17\1\122\17\17\1\122"+
    "\34\0\1\123\42\0\1\124\50\0\1\125\24\0\1\126"+
    "\51\0\1\77\2\0\2\77\3\0\1\77\3\0\1\77"+
    "\1\0\1\77\2\0\1\127\2\0\1\77\2\0\1\77"+
    "\50\0\1\130\46\0\1\131\2\0\7\46\1\47\21\46"+
    "\1\132\15\46\7\17\1\45\2\17\1\133\26\17\1\133"+
    "\11\17\1\134\2\17\1\45\37\17\7\53\1\105\1\135"+
    "\45\53\1\105\6\53\1\136\23\53\1\136\4\53\7\110"+
    "\1\111\37\110\7\53\1\105\1\53\1\137\35\53\7\17"+
    "\1\45\7\17\1\140\36\17\1\45\10\17\1\141\35\17"+
    "\1\45\14\17\1\142\31\17\1\45\6\17\1\143\23\17"+
    "\1\143\13\17\1\45\3\17\1\144\42\17\1\45\2\17"+
    "\1\145\26\17\1\145\14\17\1\45\1\17\1\146\35\17"+
    "\34\0\1\147\46\0\1\150\46\0\1\151\57\0\1\152"+
    "\46\0\1\153\1\0\7\46\1\47\1\154\36\46\7\17"+
    "\1\45\3\17\1\155\33\17\7\134\1\156\37\134\7\53"+
    "\1\105\2\53\1\157\26\53\1\157\14\53\1\105\7\53"+
    "\1\160\36\53\1\105\10\53\1\161\26\53\4\17\1\162"+
    "\2\17\1\163\46\17\1\45\7\17\1\164\36\17\1\45"+
    "\3\17\1\165\37\17\1\166\2\17\1\45\43\17\1\167"+
    "\2\17\1\45\46\17\1\45\3\17\1\170\42\17\1\45"+
    "\22\17\1\171\14\17\34\0\1\172\46\0\1\173\12\0"+
    "\7\46\1\47\23\46\1\174\13\46\4\17\1\175\2\17"+
    "\1\176\37\17\7\53\1\105\3\53\1\177\37\53\1\200"+
    "\2\53\1\201\46\53\1\105\7\53\1\202\27\53\7\162"+
    "\1\163\37\162\7\17\1\45\3\17\1\203\37\17\1\204"+
    "\2\17\1\45\37\17\7\166\1\205\37\166\7\167\1\206"+
    "\37\167\5\170\1\207\1\170\1\210\37\170\7\17\1\45"+
    "\1\211\36\17\7\46\1\47\22\46\1\212\14\46\7\175"+
    "\1\176\37\175\4\53\1\213\2\53\1\214\37\53\7\200"+
    "\1\201\37\200\7\53\1\105\3\53\1\215\33\53\7\17"+
    "\1\45\12\17\1\216\24\17\7\204\1\217\37\204\5\170"+
    "\1\207\1\170\1\210\4\170\1\220\32\170\5\221\1\222"+
    "\41\221\5\211\1\223\1\211\1\224\37\211\7\46\1\47"+
    "\3\46\1\225\33\46\7\213\1\214\37\213\7\53\1\105"+
    "\12\53\1\226\24\53\4\17\1\227\2\17\1\230\37\17"+
    "\5\170\1\207\1\170\1\210\20\170\1\231\16\170\5\221"+
    "\1\222\6\221\1\232\32\221\5\211\1\223\1\211\1\224"+
    "\4\211\1\233\32\211\5\234\1\235\41\234\7\225\1\236"+
    "\37\225\7\53\1\237\37\53\4\17\1\227\2\17\1\45"+
    "\11\17\1\240\23\17\1\240\1\17\5\170\1\207\1\170"+
    "\1\210\1\241\36\170\5\221\1\222\22\221\1\242\16\221"+
    "\5\211\1\223\1\211\1\224\20\211\1\243\16\211\5\234"+
    "\1\235\6\234\1\244\32\234\7\17\1\45\10\17\1\245"+
    "\2\17\1\246\23\17\5\170\1\207\1\170\1\210\23\170"+
    "\1\247\13\170\5\221\1\222\2\221\1\250\36\221\5\211"+
    "\1\223\1\211\1\224\21\211\1\251\15\211\5\234\1\235"+
    "\22\234\1\252\16\234\7\245\1\230\37\245\7\17\1\45"+
    "\13\17\1\253\23\17\5\170\1\207\1\170\1\210\2\170"+
    "\1\254\26\170\1\254\5\170\5\221\1\222\25\221\1\255"+
    "\13\221\5\211\1\223\1\211\1\224\16\211\1\256\17\211"+
    "\1\256\5\234\1\235\23\234\1\257\15\234\7\253\1\237"+
    "\37\253\5\170\1\207\1\170\1\210\3\170\1\260\33\170"+
    "\5\221\1\222\4\221\1\261\26\221\1\261\5\221\5\211"+
    "\1\223\1\211\1\224\1\211\1\262\35\211\5\234\1\235"+
    "\20\234\1\263\17\234\1\263\7\260\1\264\37\260\5\221"+
    "\1\222\5\221\1\260\33\221\5\211\1\223\1\211\1\224"+
    "\22\211\1\265\14\211\5\234\1\235\3\234\1\266\35\234"+
    "\5\211\1\223\1\211\1\224\1\267\36\211\5\234\1\235"+
    "\24\234\1\270\14\234\7\267\1\271\37\267\5\234\1\235"+
    "\2\234\1\267\36\234";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\1\11\24\0\1\1\3\0\1\1\1\0"+
    "\1\1\3\0\1\11\1\0\1\11\20\0\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\1\1\5\0\1\11\3\0"+
    "\1\11\2\0\1\11\6\0\1\11\3\1\1\11\17\0"+
    "\3\11\2\1\2\0\1\11\4\0\1\11\6\0\2\11"+
    "\2\0\1\11\2\0\1\11\3\0\2\11\1\0\1\1"+
    "\3\0\1\11\2\0\1\11\4\0\1\1\3\0\1\11"+
    "\5\0\2\11\24\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public static final int EOF = -1;
    public static final int TEXT = 2; 
    public static final int CHAR = 3;

    public static final int COMMENT = 4;
    public static final int STARTTITLE = 5;
    public static final int ENDTITLE = 6;
    public static final int STARTHEAD = 7;
    public static final int ENDHEAD = 8;
    public static final int STARTTAG = 9;
    public static final int ENDTAG = 10;
    public static final int SCRIPT = 11;
    public static final int META = 12;
    public static final int STYLE = 13;
    public static final int DOCTYPE = 14;
    public static final int IMG = 15;
    public static final int NEWLINE = 16;
    public static final int WHITESPACE = 17;
    public static final int STARTANCHOR = 18;
    public static final int ENDANCHOR = 19;
    public static final int FRAME = 20;
    public static final int NBSP = 21;
    public static final int AMP = 22;
    public static final int GT = 23;
    public static final int LT = 24;
    public static final int QUOT = 25;
    public static final int APOS = 26;
    
    public static final int SYMBOL_DECIMAL = 27;
    public static final int SYMBOL_HEX = 28;
    //public static final int SYMBOL_CHAR = 29;
    
    public static final int BASE = 30;
    public static final int STARTNOINDEX = 31;
    public static final int ENDNOINDEX = 32;


    public static final String [] resultAsString = {
        "",
        "eof",
        "text",
        "char",
        "comment",
        "starttitle",
        "endtitle",
        "starthead",
        "endhead",
        "starttag",
        "endtag",
        "script",
        "meta",
        "style",
        "doctype",
        "img",
        "newline",
        "whitespace",
        "startanchor",
        "endanchor",
        "frame",
        "nbsp",
        "amp",
        "gt",
        "lt",
        "quot",
        "apos",
        "symbol_decimal",
        "symbol_hex",
        "symbol_char",
        "base",
        "startnoindex",
        "endnoindex"
    };

	public HTMLLexer() {}

    public int lex(FastStringBuffer matchedText)
      throws IOException {
      matchedText.clear();
      int lexStatus = yylex();
      if (lexStatus != YYEOF) {
        matchedText.append(zzBuffer, zzStartRead, yylength());
        return lexStatus;
      } else {
        return EOF;
      }
    }
    
    public int lex() throws IOException {
    	int lexStatus = yylex();
    	if (lexStatus == YYEOF) {
    		return EOF;
    	}
    	return lexStatus;
    }
    
	public int getText(char [] dest, int destOffset) {
		int count = yylength();
		System.arraycopy(zzBuffer, zzStartRead, dest, destOffset, count);
		return count;
	}
	
	public String getText() {
		return new String(zzBuffer, zzStartRead, yylength());
	}
	
	public void getText(FastStringBuffer matchedText) {
		matchedText.clear();
		matchedText.append(zzBuffer, zzStartRead, yylength());
	}

	public char getChar() {
		return zzBuffer[zzStartRead];
	}
 
	public void reset(java.io.Reader reader) {
		yyreset(reader);
	}
	
	public int getOffset() {
		return yychar;
	}
	
	public int getSize() {
		return yylength();
	}
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HTMLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1332) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return ENDANCHOR;
          }
        case 32: break;
        case 29: 
          { return ENDNOINDEX;
          }
        case 33: break;
        case 19: 
          { return IMG;
          }
        case 34: break;
        case 8: 
          { return COMMENT;
          }
        case 35: break;
        case 31: 
          { return SCRIPT;
          }
        case 36: break;
        case 27: 
          { return STARTNOINDEX;
          }
        case 37: break;
        case 28: 
          { return DOCTYPE;
          }
        case 38: break;
        case 24: 
          { return BASE;
          }
        case 39: break;
        case 18: 
          { return 100187;
          }
        case 40: break;
        case 13: 
          { return STARTANCHOR;
          }
        case 41: break;
        case 16: 
          { return QUOT;
          }
        case 42: break;
        case 2: 
          { return CHAR;
          }
        case 43: break;
        case 14: 
          { return APOS;
          }
        case 44: break;
        case 20: 
          { return STARTHEAD;
          }
        case 45: break;
        case 10: 
          { return SYMBOL_HEX;
          }
        case 46: break;
        case 21: 
          { return STARTTITLE;
          }
        case 47: break;
        case 15: 
          { return NBSP;
          }
        case 48: break;
        case 4: 
          { return LT;
          }
        case 49: break;
        case 17: 
          { return 100171;
          }
        case 50: break;
        case 11: 
          { return ENDTAG;
          }
        case 51: break;
        case 30: 
          { return STYLE;
          }
        case 52: break;
        case 23: 
          { return META;
          }
        case 53: break;
        case 1: 
          { return TEXT;
          }
        case 54: break;
        case 25: 
          { return ENDTITLE;
          }
        case 55: break;
        case 22: 
          { return ENDHEAD;
          }
        case 56: break;
        case 5: 
          { return GT;
          }
        case 57: break;
        case 7: 
          { return STARTTAG;
          }
        case 58: break;
        case 26: 
          { return FRAME;
          }
        case 59: break;
        case 3: 
          { return WHITESPACE;
          }
        case 60: break;
        case 6: 
          { return SYMBOL_DECIMAL;
          }
        case 61: break;
        case 9: 
          { return AMP;
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
